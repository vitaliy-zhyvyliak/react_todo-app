{"version":3,"sources":["components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/TodoApp/TodoApp.tsx","App.tsx","index.js"],"names":["TodoItem","React","memo","todo","removeTodo","changeStatus","editTitle","useState","title","tempTitle","setTempTitle","isEditing","setIsEditing","className","classNames","completed","editing","onDoubleClick","type","checked","onClick","id","htmlFor","autoFocus","value","onChange","event","target","onKeyDown","key","onBlur","TodoList","items","map","TodosFilter","toggleFilter","toggled","setToggled","href","selected","TodoApp","newTodoTitle","setNewTodoTitle","JSON","parse","localStorage","getItem","todos","setTodos","completeNumber","setCompleteNumber","uncompleteNumber","setUncompleteNumber","toggledTodos","setToggledTodos","useEffect","setItem","stringify","filter","length","onSubmit","preventDefault","Date","placeholder","find","newArr","item","todoId","filteredTodos","newTitle","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bb0ca536.chunk.js","sourcesContent":["/* eslint-disable import/extensions */\n/* eslint-disable import/no-unresolved */\n/* eslint-disable max-len */\nimport React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types';\n\ntype Props = {\n  todo: Todo,\n  removeTodo: (todoId: number) => void,\n  changeStatus: (todoId: number) => void,\n  editTitle: (newTitle: string, todoId: number) => void,\n};\n\nexport const TodoItem: React.FC<Props> = React.memo(({\n  todo,\n  removeTodo,\n  changeStatus,\n  editTitle,\n}) => {\n  const [tempTitle, setTempTitle] = useState(todo.title);\n  const [isEditing, setIsEditing] = useState(false);\n\n  return (\n    <li\n      className={\n        classNames({\n          completed: todo.completed,\n        }, {\n          editing: isEditing,\n        })\n      }\n      onDoubleClick={() => {\n        setIsEditing(true);\n        setTempTitle(todo.title);\n      }}\n    >\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          checked={todo.completed}\n          onClick={() => changeStatus(todo.id)}\n        />\n        <label htmlFor=\"toggle-view\">\n          {todo.title ? todo.title : `${removeTodo(todo.id)}`}\n        </label>\n        <button type=\"button\" className=\"destroy\" onClick={() => removeTodo(todo.id)} />\n      </div>\n      {isEditing && (\n        <input\n          // eslint-disable-next-line jsx-a11y/no-autofocus\n          autoFocus\n          type=\"text\"\n          className=\"edit\"\n          value={tempTitle}\n          onChange={event => setTempTitle(event.target.value)}\n          onKeyDown={(event) => {\n            if (event.key === 'Enter') {\n              editTitle(tempTitle, todo.id);\n              setIsEditing(false);\n            }\n\n            if (event.key === 'Escape') {\n              setIsEditing(false);\n              setTempTitle(todo.title);\n            }\n          }}\n          onBlur={() => {\n            setIsEditing(false);\n            setTempTitle(todo.title);\n          }}\n        />\n      )}\n    </li>\n  );\n});\n","/* eslint-disable import/extensions */\n/* eslint-disable import/no-unresolved */\nimport React from 'react';\nimport { Todo } from '../../types';\nimport { TodoItem } from '../TodoItem/TodoItem';\n\ntype Props = {\n  items: Todo[],\n  removeTodo: (todoId: number) => void,\n  changeStatus: (todoId: number) => void,\n  editTitle: (newTitle: string, todoId: number) => void,\n};\n\nexport const TodoList: React.FC<Props> = React.memo(({\n  items,\n  removeTodo,\n  changeStatus,\n  editTitle,\n}) => (\n  <ul className=\"todo-list\">\n    {items.map(todo => (\n      <TodoItem\n        key={todo.id}\n        todo={todo}\n        removeTodo={removeTodo}\n        changeStatus={changeStatus}\n        editTitle={editTitle}\n      />\n    ))}\n  </ul>\n));\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  toggleFilter: (event: string) => void,\n};\n\nexport const TodosFilter: React.FC<Props> = React.memo(({ toggleFilter }) => {\n  const [toggled, setToggled] = useState('all');\n\n  return (\n    <ul className=\"filters\">\n      <li>\n        <a\n          href=\"#/\"\n          className={classNames({ selected: toggled === 'all' })}\n          onClick={() => {\n            toggleFilter('all');\n            setToggled('all');\n          }}\n        >\n          All\n        </a>\n      </li>\n\n      <li>\n        <a\n          href=\"#/active\"\n          className={classNames({ selected: toggled === 'active' })}\n          onClick={() => {\n            toggleFilter('active');\n            setToggled('active');\n          }}\n        >\n          Active\n        </a>\n      </li>\n\n      <li>\n        <a\n          href=\"#/completed\"\n          className={classNames({ selected: toggled === 'completed' })}\n          onClick={() => {\n            toggleFilter('completed');\n            setToggled('completed');\n          }}\n        >\n          Completed\n        </a>\n      </li>\n    </ul>\n  );\n});\n","/* eslint-disable import/no-unresolved */\n/* eslint-disable import/extensions */\n/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport { TodoList } from '../TodoList/TodoList';\nimport { TodosFilter } from '../TodoFilter/TodoFilter';\nimport { Todo } from '../../types';\n\nexport const TodoApp: React.FC = React.memo(() => {\n  const [newTodoTitle, setNewTodoTitle] = useState('');\n  const [todos, setTodos] = useState(\n    JSON.parse(localStorage.getItem('items') || '[]'),\n  );\n  const [completeNumber, setCompleteNumber] = useState(0);\n  const [uncompleteNumber, setUncompleteNumber] = useState(0);\n  const [toggledTodos, setToggledTodos] = useState(todos);\n\n  useEffect(() => {\n    localStorage.setItem('items', JSON.stringify(todos));\n\n    setCompleteNumber(todos.filter((todo: Todo) => todo.completed).length);\n    setUncompleteNumber(todos.filter((todo: Todo) => !todo.completed).length);\n\n    setToggledTodos(todos);\n  }, [todos]);\n\n  const addNewTodo = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const todo = {\n      id: +new Date(),\n      title: newTodoTitle,\n      completed: false,\n    };\n\n    if (newTodoTitle) {\n      setTodos([...todos, todo]);\n      setNewTodoTitle('');\n    }\n  };\n\n  const removeTodo = (todoId: number) => {\n    const filteredTodos = todos.filter((item: { id: number; }) => item.id !== todoId);\n\n    setTodos(filteredTodos);\n  };\n\n  const clearCompleted = () => {\n    const filteredTodos = todos.filter((item: { completed: boolean; }) => !item.completed);\n\n    setTodos(filteredTodos);\n  };\n\n  const changeStatus = (todoId: number) => {\n    setTodos(\n      todos.map((item: Todo) => {\n        if (item.id === todoId) {\n          return {\n            ...item,\n            completed: !item.completed,\n          };\n        }\n\n        return item;\n      }),\n    );\n  };\n\n  const changeStatusToAll = () => {\n    if (todos.find((todo: Todo) => todo.completed !== true)) {\n      const newArr = todos.map((todo: Todo) => (\n        {\n          ...todo,\n          completed: true,\n        }\n      ));\n\n      return setTodos(newArr);\n    }\n\n    return setTodos(\n      todos.map((item: Todo) => ({\n        ...item,\n        completed: !item.completed,\n      })),\n    );\n  };\n\n  const editTitle = (newTitle: string, todoId: number) => {\n    setTodos(\n      todos.map((item: Todo) => {\n        if (item.id === todoId) {\n          return {\n            ...item,\n            title: newTitle,\n          };\n        }\n\n        return item;\n      }),\n    );\n  };\n\n  const toggleFilter = (filter: string) => {\n    switch (filter) {\n      case 'all':\n        return setToggledTodos(todos);\n      case 'active':\n        return setToggledTodos([...todos].filter(\n          (todo: Todo) => !todo.completed,\n        ));\n      case 'completed':\n        return setToggledTodos([...todos].filter(\n          (todo: Todo) => todo.completed,\n        ));\n      default:\n        return 1;\n    }\n  };\n\n  return (\n    <>\n      <header className=\"header\">\n        <h1>todos</h1>\n\n        <form onSubmit={addNewTodo}>\n          <input\n            type=\"text\"\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            value={newTodoTitle}\n            onChange={event => setNewTodoTitle(event.target.value)}\n          />\n        </form>\n      </header>\n\n      <section className=\"main\">\n        <input\n          type=\"checkbox\"\n          checked={completeNumber === todos.length}\n          id=\"toggle-all\"\n          className=\"toggle-all\"\n          onChange={changeStatusToAll}\n        />\n        <label htmlFor=\"toggle-all\">Mark all as complete</label>\n        <TodoList\n          items={toggledTodos}\n          removeTodo={removeTodo}\n          changeStatus={changeStatus}\n          editTitle={editTitle}\n        />\n      </section>\n\n      {todos.length > 0 && (\n        <footer className=\"footer\">\n          <span className=\"todo-count\">\n            {`${uncompleteNumber} ${uncompleteNumber === 1 ? 'item' : 'items'} left`}\n          </span>\n\n          <TodosFilter toggleFilter={toggleFilter} />\n\n          {completeNumber > 0 && (\n            <button\n              type=\"button\"\n              className=\"clear-completed\"\n              onClick={clearCompleted}\n            >\n              Clear completed\n            </button>\n          )}\n        </footer>\n      )}\n    </>\n  );\n});\n","/* eslint-disable import/extensions */\n/* eslint-disable import/no-unresolved */\nimport React from 'react';\nimport { TodoApp } from './components/TodoApp/TodoApp';\n\nconst App: React.FC = () => (\n  <section className=\"todoapp\">\n    <TodoApp />\n  </section>\n);\n\nexport default App;\n","/* eslint-disable import/extensions */\n/* eslint-disable import/no-unresolved */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}